# Services required to run & use the Naptha Node, plus the Node container itself.
# start whichever services you want/need - all, some, or just one.

services:
  rabbitmq:
    image: rabbitmq:4-alpine
    container_name: node-rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:?error}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:?error} # loaded from .env file, MUST be present else error
      RABBITMQ_DEFAULT_VHOST: '/'
      RABBITMQ_MANAGEMENT_PASSWORD: ${RABBITMQ_PASSWORD:?error} # loaded from .env file, MUST be present else error
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node_private_network
    ports:
      - '5672:5672' # exposed for testing, but should not be in production.
      # - '15672:15672' # this is the management port, e.g. if you want rabbitmq:4-management

  pgvector:
    image: pgvector/pgvector:pg17
    container_name: node-pgvector
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql # init SQL script to create databases etc.
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?error}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - node_private_network
    # ports:
      #- '5433:5432' # exposed for testing, but should not be for production

  celery-worker:
    container_name: celery
    build:
      dockerfile: Dockerfile-celery
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RMQ_USER: ${RABBITMQ_USER:?error}
      RMQ_PASSWORD: ${RABBITMQ_PASSWORD?:error}
      RMQ_HOST: rabbitmq # name of the RMQ service; override for external config.
      OPENAI_API_KEY: ${OPENAI_API_KEY?:error}
    networks:
      - node_private_network

  surrealdb:
    container_name: surrealdb
    image: surrealdb/surrealdb:latest
    user: root # stupid surreal configuration
    #pull_policy: always
    command: ['start', 'rocksdb:/surreal_data/hub.db']
    networks:
      - node_private_network
    volumes:
      - surreal_data:/surreal_data
    ports:
      - '3001:8000'

  # TODO - litellm will be in vllm / ollama docker-compose files since it needs to know about those services.

  node-app:
    # can replace this with naptha image once it's published to hub, then we just
    # need to use the .env file UNLESS config.py is modified
    container_name: node-app
    build:
      dockerfile: Dockerfile-node
    env_file:
      - ./.env
    # NOTE for testing - this can override the default config.py in the container
    volumes:
      - ./node/config.py:/app/node/config/config.py
    networks:
      - node_private_network
    # restart: unless-stopped
    depends_on:
      pgvector:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      celery-worker:
        condition: service_started
      surrealdb:
        condition: service_started
    ports:
      - '7001:7001'

networks:
  node_private_network:

volumes:
  rabbitmq_data: # persist rabbitMQ data e.g. anything durable; users & credentials; configs
  postgres_data:
  surreal_data: